#pragma once
#include <Windows.h>
#include <d3d9.h>

#include "Universal Graphics API Hook/BaseGraphicAPIHook/BaseGraphicAPIHook.h"
#include "ImGui/imgui.h"
#include "ImGui/imgui_impl_win32.h"
#include "ImGui/imgui_impl_dx9.h"

#pragma comment(lib, "d3d9.lib")

typedef HRESULT(__stdcall* tD3d9EndScene)(IDirect3DDevice9* _This);

enum D3DVTABLE_INDEX {
    iQueryInterface,
    iAddRef,
    iRelease,
    iTestCooperativeLevel,
    iGetAvailableTextureMem,
    iEvictManagedResources,
    iGetDirect3D,
    iGetDeviceCaps,
    iGetDisplayMode,
    iGetCreationParameters,
    iSetCursorProperties,
    iSetCursorPosition,
    iShowCursor,
    iCreateAdditionalSwapChain,
    iGetSwapChain,
    iGetNumberOfSwapChains,
    iReset,
    iPresent,
    iGetBackBuffer,
    iGetRasterStatus,
    iSetDialogBoxMode,
    iSetGammaRamp,
    iGetGammaRamp,
    iCreateTexture,
    iCreateVolumeTexture,
    iCreateCubeTexture,
    iCreateVertexBuffer,
    iCreateIndexBuffer,
    iCreateRenderTarget,
    iCreateDepthStencilSurface,
    iUpdateSurface,
    iUpdateTexture,
    iGetRenderTargetData,
    iGetFrontBufferData,
    iStretchRect,
    iColorFill,
    iCreateOffscreenPlainSurface,
    iSetRenderTarget,
    iGetRenderTarget,
    iSetDepthStencilSurface,
    iGetDepthStencilSurface,
    iBeginScene,
    iEndScene,
    iClear,
    iSetTransform,
    iGetTransform,
    iMultiplyTransform,
    iSetViewport,
    iGetViewport,
    iSetMaterial,
    iGetMaterial,
    iSetLight,
    iGetLight,
    iLightEnable,
    iGetLightEnable,
    iSetClipPlane,
    iGetClipPlane,
    iSetRenderState,
    iGetRenderState,
    iCreateStateBlock,
    iBeginStateBlock,
    iEndStateBlock,
    iSetClipStatus,
    iGetClipStatus,
    iGetTexture,
    iSetTexture,
    iGetTextureStageState,
    iSetTextureStageState,
    iGetSamplerState,
    iSetSamplerState,
    iValidateDevice,
    iSetPaletteEntries,
    iGetPaletteEntries,
    iSetCurrentTexturePalette,
    iGetCurrentTexturePalette,
    iSetScissorRect,
    iGetScissorRect,
    iSetSoftwareVertexProcessing,
    iGetSoftwareVertexProcessing,
    iSetNPatchMode,
    iGetNPatchMode,
    iDrawPrimitive,
    iDrawIndexedPrimitive,
    iDrawPrimitiveUP,
    iDrawIndexedPrimitiveUP,
    iProcessVertices,
    iCreateVertexDeclaration,
    iSetVertexDeclaration,
    iGetVertexDeclaration,
    iSetFVF,
    iGetFVF,
    iCreateVertexShader,
    iSetVertexShader,
    iGetVertexShader,
    iSetVertexShaderConstantF,
    iGetVertexShaderConstantF,
    iSetVertexShaderConstantI,
    iGetVertexShaderConstantI,
    iSetVertexShaderConstantB,
    iGetVertexShaderConstantB,
    iSetStreamSource,
    iGetStreamSource,
    iSetStreamSourceFreq,
    iGetStreamSourceFreq,
    iSetIndices,
    iGetIndices,
    iCreatePixelShader,
    iSetPixelShader,
    iGetPixelShader,
    iSetPixelShaderConstantF,
    iGetPixelShaderConstantF,
    iSetPixelShaderConstantI,
    iGetPixelShaderConstantI,
    iSetPixelShaderConstantB,
    iGetPixelShaderConstantB,
    iDrawRectPatch,
    iDrawTriPatch,
    iDeletePatch,
    iCreateQuery,
    iSetConvolutionMonoKernel,
    iComposeRects,
    iPresentEx,
    iGetGPUThreadPriority,
    iSetGPUThreadPriority,
    iWaitForVBlank,
    iCheckResourceResidency,
    iSetMaximumFrameLatency,
    iGetMaximumFrameLatency,
    iCheckDeviceState,
    iCreateRenderTargetEx,
    iCreateOffscreenPlainSurfaceEx,
    iCreateDepthStencilSurfaceEx,
    iResetEx,
    iGetDisplayModeEx
};

class D3d9Hook : public BaseGraphicAPIHook
{
public:
	static tD3d9EndScene m_oD3d9HookRoutine;
	static IDirect3DDevice9* s_pD3d9Device;

public:
	D3d9Hook(tDrawRoutine _DrawRoutine);

	virtual DWORD Enable() override;
	virtual DWORD Disable() override;
};